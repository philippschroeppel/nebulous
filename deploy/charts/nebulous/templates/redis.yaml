{{- if or .Values.redis.auth.host .Values.redis.create }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.redis.secret.name }}
  namespace: {{ include "nebulous.namespace" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
type: Opaque
data:
  {{ .Values.redis.secret.keys.connectionString }}: {{ printf "redis://:%s@%s:%d/%d" .Values.redis.auth.password (include "redis.host" .) (int .Values.redis.auth.port) (int .Values.redis.auth.database) | b64enc }}
  {{ .Values.redis.secret.keys.password }}: {{ .Values.redis.auth.password | b64enc }}
---
{{- end }}
{{- if and .Values.redis.tailscale.authKey (not .Values.headscale.create) }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.redis.tailscale.secret.name }}
  namespace: {{ include "nebulous.namespace" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
type: Opaque
data:
  {{ .Values.redis.tailscale.secret.keys.authKey }}: {{ required ".Values.redis.tailscale.authKey is required" .Values.tailscale.authKey | b64enc }}
---
{{- end }}
{{- if .Values.redis.create }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.redis.serviceAccountName }}
---
# Reference: https://github.com/tailscale/tailscale/blob/main/docs/k8s/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: tailscale-{{ .Values.redis.serviceAccountName }}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create"]
  - apiGroups: [""]
    resourceNames: ["{{ include "redis.tailscaleStateSecretName" . }}"]
    resources: ["secrets"]
    verbs: ["get", "update", "patch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: tailscale-{{ .Values.redis.serviceAccountName }}
subjects:
  - kind: ServiceAccount
    name: {{ .Values.redis.serviceAccountName }}
roleRef:
  kind: Role
  name: tailscale-redis
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "redis.name" . }}
  namespace: {{ include "nebulous.namespace" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: {{ include "redis.name" . }}
    app.kubernetes.io/component: cache
data:
  redis.conf: |
    save 60 1
    appendonly yes
    appendfsync everysec
    dir /mnt/data
    aclfile /mnt/users/users.acl
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "redis.name" . }}
  namespace: {{ include "nebulous.namespace" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: {{ include "redis.name" . }}
    app.kubernetes.io/component: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "redis.name" . }}
  serviceName: {{ include "redis.name" . }}
  template:
    metadata:
      labels:
        {{- include "common.labels" . | nindent 8 }}
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: {{ include "redis.name" . }}
        app.kubernetes.io/component: cache
        app: {{ include "redis.name" . }}
    spec:
      serviceAccountName: {{ .Values.redis.serviceAccountName }}
      volumes:
        - name: redis-config
          configMap:
            name: {{ include "redis.name" . }}
        {{- if not .Values.redis.persistence.enabled }}
        - name: redis-data
          emptyDir: {}
        - name: redis-users
          emptyDir: {}
        {{- end }}
      initContainers:
        - name: ensure-acl
          image: "redis:{{ .Values.redis.imageTag }}"
          command:
            - "/bin/bash"
            - "-c"
            - |
              ACL_FILE="/mnt/users/users.acl"
              
              # Ensure that users.acl exists
              touch $ACL_FILE
              
              # Remove any existing 'user default' line
              sed -i '/^user default \b/d' "$ACL_FILE"
              
              # (Re)set default user
              HASHED_PASSWORD=$(echo -n $REDIS_PASSWORD | sha256sum | awk '{print $1}')
              echo "user default on sanitize-payload #${HASHED_PASSWORD} ~* &* +@all" >> $ACL_FILE
              
              # Ensure write permissions for Redis
              chown -R redis:redis /mnt/users
              chown -R redis:redis /mnt/data
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.redis.secret.name }}
                  key: {{ .Values.redis.secret.keys.password }}
          volumeMounts:
            - mountPath: "/mnt/data"
              name: redis-data
            - mountPath: "/mnt/users"
              name: redis-users
      containers:
        - name: redis
          image: "redis:{{ .Values.redis.imageTag }}"
          args:
            - "/mnt/config/redis.conf"
          ports:
            - containerPort: 6379
          volumeMounts:
            - mountPath: "/mnt/config"
              name: redis-config
            - mountPath: "/mnt/data"
              name: redis-data
            - mountPath: "/mnt/users"
              name: redis-users
        # Reference: https://github.com/tailscale/tailscale/blob/main/docs/k8s/userspace-sidecar.yaml
        # Docs: https://tailscale.com/kb/1185/kubernetes
        - name: tailscale
          image: "tailscale/tailscale:{{ .Values.tailscale.imageTag }}"
          imagePullPolicy: Always
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
          env:
            - name: TS_USERSPACE
              value: "true"
            - name: TS_AUTH_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.redis.tailscale.secret.name }}
                  key: {{ .Values.redis.tailscale.secret.keys.authKey }}
            - name: TS_HOSTNAME
              value: {{ include "redis.name" . }}
            - name: TS_EXTRA_ARGS
              value: --login-server {{ include "tailscale.loginServer" . }}
            - name: TS_KUBE_SECRET
              value: {{ include "redis.tailscaleStateSecretName" . }}
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
          {{- with .Values.redis.tailscale.resources }}
          resources:
          {{- toYaml . | nindent 12 }}
          {{- end }}
  {{- if .Values.redis.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          {{- include "common.labels" . | nindent 14 }}
      spec:
        accessModes: ["ReadWriteOnce"]
        {{- with .Values.redis.persistence.data.storageClassName }}
        storageClassName: {{ . }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.redis.persistence.data.size }}
    - metadata:
        name: redis-users
        labels:
          {{- include "common.labels" . | nindent 14 }}
      spec:
        accessModes: ["ReadWriteOnce"]
        {{- with .Values.redis.persistence.acl.storageClassName }}
        storageClassName: {{ . }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.redis.persistence.acl.size }}
    {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "redis.serviceName" . }}
  namespace: {{ include "nebulous.namespace" . }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
  {{- with .Values.redis.service.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  selector:
    app: {{ include "redis.name" . }}
  ports:
    - protocol: TCP
      port: {{ .Values.redis.auth.port }}
      targetPort: 6379
  type: ClusterIP
{{- end }}
