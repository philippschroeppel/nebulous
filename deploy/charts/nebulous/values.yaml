# -- Override the namespace. By default, Nebulous is deployed to the Helm release's namespace.
namespaceOverride: ""

# -- Additional environment variables to pass to the Nebulous server container.
extraEnv: [ ]

## Nebulous configuration
image:
  pullPolicy: "IfNotPresent"
  # -- The nebulous image tag. Defaults to the Helm chart's appVersion.
  tag: ""
  # -- The repository to pull the server image from.
  repository: "us-docker.pkg.dev/agentsea-dev/nebulous/server"

# -- The resource requests and limits for the Nebulous server container.
resources: { }

# -- The log level of the Nebulous server. Options are "off", "trace", "debug", "info", "warn", "error".
logLevel: "info"

serviceAccount:
  # -- The name of the Kubernetes service account to be used by the Nebulous deployment.
  # -- If left empty, a service account will be created.
  name: ""

service:
  # -- The port of the Kubernetes service.
  port: 3000
  # -- Annotations to add to the Kubernetes service.
  annotations: { }
  # -- Override the name of the Kubernetes service.
  nameOverride: ""

ingress:
  # -- If enabled, create an Ingress resource.
  enabled: false

  # -- Annotations to add to the Ingress resource.
  annotations: { }
  # -- The ingress class.
  ingressClassName: ""

# -- The URL that agents use to connect to Nebulous.
publicUrl: ""

local:
  # -- If enabled, nebulous can run Pods in the local cluster.
  enabled: false

bucket:
  # -- The name of the Amazon S3 bucket to use for Nebulous.
  name: ""
  # -- The region of the Amazon S3 bucket to use for Nebulous.
  region: ""

  secret:
    # -- The name of the secret containing the AWS credentials.
    name: "aws-secret"
    keys:
      # -- The key in the secret containing the access key ID.
      accessKeyId: "AWS_ACCESS_KEY_ID"
      # -- The key in the secret containing the secret access key.
      secretAccessKey: "AWS_SECRET_ACCESS_KEY"

  # -- Manual configuration of the AWS credentials. Not recommended for production.
  auth:
    accessKeyId: ""
    secretAccessKey: ""

# -- The owner of the Nebulous root.
rootOwner: "agentsea"

messageQueue:
  # -- The message queue type. The currently only supported value is "redis".
  type: "redis"

orign:
  # -- The URL that Nebulous uses to connect to the Orign server.
  url: ""

tailscale:
  # -- The Tailscale host to connect to. If headscale.enabled is true, this is ignored.
  loginServer: "https://login.tailscale.com"
  # -- The Tailscale API key. If headscale.enabled is true, this is ignored.
  apiKey: ""
  # -- The Tailscale auth key. If headscale.enabled is true, this is ignored.
  authKey: ""
  # -- The name of the Tailscale organization. If headscale.enabled is true, this is ignored.
  organization: ""

  secret:
    # -- Name of the secret with the Tailscale auth key and API key.
    name: "tailscale-secret"
    keys:
      # -- The key in the secret containing the Tailscale API key.
      apiKey: "API_KEY"
      # -- The key in the secret containing the Tailscale auth key.
      authKey: "AUTH_KEY"

  # -- The Tailscale sidecar image tag.
  imageTag: "stable"

  # -- The resource requests and limits for the Nebulous server's Tailscale sidecar container.
  resources: { }

encryptionKey:
  secret:
    # -- The name of the secret containing the 32 byte encryption key.
    name: "nebulous-secret"
    keys:
      # -- The key in the secret containing the encryption key.
      encryptionKey: "ENCRYPTION_KEY"

  # -- The 32 byte encryption key encoded in base64. Not recommended for production.
  encodedValue: ""

openmeter:
  # -- Enable usage monitoring with OpenMeter.
  enabled: false

  # -- The URL to report OpenMeter data to.
  url: "https://openmeter.cloud"

  secret:
    # -- The name of the secrets containing the OpenMeter API token.
    name: "openmeter-secret"
    keys:
      # -- The key in the eecret containing the OpenMeter API token.
      token: "TOKEN"

  # -- The OpenMeter API token. Not recommended for production.
  token: ""

## Storage configuration
storage:
  huggingface:
    claimName: "huggingface-pvc"

    createPersistentVolumeClaim: true
    size: "100Gi"
    storageClassName: ""

  adapter:
    claimName: "adapter-pvc"

    createPersistentVolumeClaim: true
    size: "100Gi"
    storageClassName: ""

  dataset:
    claimName: "dataset-pvc"

    createPersistentVolumeClaim: true
    size: "100Gi"
    storageClassName: ""

  model:
    claimName: "model-pvc"

    createPersistentVolumeClaim: true
    size: "1000Gi"
    storageClassName: ""

## Database configuration
postgres:
  secret:
    # -- Name of the secret with the Postgres connection string.
    name: "postgres-secret"
    keys:
      # -- The key in the secret containing the Postgres connection string.
      connectionString: "CONNECTION_STRING"

  # -- Manual configuration of the Postgres connection. Except for 'host', this information is also used if 'create' is true.
  auth:
    host: ""
    port: 5432
    database: "nebulous"
    user: "nebulous"
    password: "nebulous"

  # -- If enabled, create a Postgres deployment and service. Not recommended for production.
  create: false
  # -- The postgres image tag. Ignored unless 'create' is true.
  imageTag: "17"

  persistence:
    # -- The size of the PersistentVolumeClaim for the Postgres data.
    size: "100Gi"
    # -- The storage class of the PersistentVolumeClaim for the Postgres data.
    storageClassName: ""

  # -- The resource requests and limits for the Postgres container.
  resources: { }

redis:
  secret:
    # -- Name of the secret with the Redis connection string and password.
    name: "redis-secret"
    keys:
      # -- The key in the secret containing the Redis connection string.
      connectionString: "CONNECTION_STRING"
      # -- The key in the secret containing the Redis password.
      password: "PASSWORD"

  # -- Manual configuration of the Redis connection. Except for 'host', this information is also used if 'create' is true.
  auth:
    host: ""
    port: 6379
    database: 0
    password: "nebulous"

  # -- If enabled, create a Redis deployment and service. Not recommended for production.
  create: false
  # -- The redis image tag. Ignored unless 'create' is true.
  imageTag: "8"

  service:
    # -- The annotations to add to the Kubernetes service.
    annotations: { }
    # -- Override the name of the Kubernetes service.
    nameOverride: ""

  # -- The name of the Kubernetes service account for the Redis Pod.
  serviceAccountName: "redis"

  # -- The resource requests and limits for the Redis container.
  resources: { }

  tailscale:
    # -- The Tailscale auth key for Redis. If headscale.enabled is true, this is ignored.
    authKey: ""

    secret:
      # -- Name of the secret with the Tailscale auth key for Redis.
      name: "tailscale-redis-secret"
      keys:
        # -- The key in the secret containing the Tailscale auth key.
        authKey: "AUTH_KEY"

    # -- The resource requests and limits for the Redis database's Tailscale sidecar container.
    resources: { }

  persistence:
    # -- If enabled, persist the Redis data.
    enabled: false

    data:
      # -- The size of the PVC for the Redis data,
      size: "5Gi"
      # -- The storage class of the PersistentVolumeClaim for the Redis data.
      storageClassName: ""

    acl:
      # -- The size of the PVC for the Redis ACL file.
      size: "64Mi"
      # -- The storage class of the PersistentVolumeClaim for the Redis ACL file.
      storageClassName: ""

## Headscale configuration
headscale:
  # -- If true, create a Headscale deployment and service. Overrides tailscale configuration. Not recommended for production.
  create: false
  # -- Namespace override for the Headscale deployment.
  namespaceOverride: ""
  # -- The Headscale image tag.
  imageTag: "stable"
  # -- The domain under which the Headscale server is exposed. Required if create is true.
  # The headscale server must be reachable at https://${domain}:443.
  domain: ""

  # -- Prefixes to allocate tailaddresses from. Must be within the IP ranges supported by the Tailscale client.
  # Refer to https://github.com/juanfont/headscale/blob/main/config-example.yaml for details.
  prefixes:
    v4: 100.64.0.0/10
    v6: fd7a:115c:a1e0::/48

  dns:
    # -- The base domain for MagicDNS hostnames. Cannot be the same as the Headscale server's domain.
    # Refer to https://github.com/juanfont/headscale/blob/main/config-example.yaml for details.
    baseDomain: ""

  log:
    # -- The log level of the Headscale server. Options are "off", "trace", "debug", "info", "warn", "error".
    level: "info"
    # -- The log format of the Headscale server. Options are "text" or "json".
    format: "text"

  # -- The Headscale DERP configuration. Either 'externalMapUrls' or 'configMap' must be set.
  derp:
    # -- URLs of externally available DERP maps encoded in JSON.
    externalMaps: [ ]
    configMap:
      # -- The name of the ConfigMap containing the DERP server configuration.
      name: ""
      # -- The key in the ConfigMap containing the DERP server configuration YAML file.
      key: "servers.yaml"

  tls:
    letsencrypt:
      # -- The hostname for the Let's Encrypt certificate. Has to match the domain of the Headscale server.
      hostname: ""
      # -- The email address for the Let's Encrypt certificate.
      email: ""

  persistence:
    # -- The size of the PersistentVolumeClaim for the Headscale data.
    size: "1Gi"
    # -- The storage class of the PersistentVolumeClaim for the Headscale data.
    storageClassName: ""

  # -- The resource requests and limits for the headscale container.
  resources: { }

  service:
    # -- The port of the Kubernetes service.
    port: 80
    # -- The type of the Kubernetes service. Options are "ClusterIP", "NodePort", and "LoadBalancer".
    type: "ClusterIP"
    # -- The annotations to add to the Kubernetes service.
    annotations: { }
    # -- Override the name of the Kubernetes service.
    nameOverride: ""

  ingress:
    # -- If enabled, create an Ingress resource. Ignored unless 'enabled' is true.
    enabled: false

    # -- Annotations to add to the Ingress resource.
    annotations: { }
    # -- The ingress class.
    ingressClassName: ""

## Provider configuration
providers:
  runpod:
    # -- Enable access to Runpod.
    enabled: false

    secret:
      # -- The name of the secret containing the Runpod credentials.
      name: "runpod-secret"
      keys:
        # -- The key in the secret containing the API key.
        apiKey: "RUNPOD_API_KEY"
        # -- The key in the secret containing the container registry auth ID.
        containerRegistryAuthId: "RUNPOD_CONTAINER_REGISTRY_AUTH_ID"

    # -- Manual configuration of the Runpod credentials. Not recommended for production.
    auth:
      apiKey: ""
      containerRegistryAuthId: ""
